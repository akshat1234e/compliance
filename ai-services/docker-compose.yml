version: '3.8'

services:
  ai-services:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - POSTGRES_HOST=postgres
      - MONGODB_URI=mongodb://mongodb:27017
      - REDIS_HOST=redis
      - ELASTICSEARCH_HOST=elasticsearch
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
    networks:
      - ai-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ai_services
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai-network
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=ai_services
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - ai-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ai-network
    restart: unless-stopped

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - dev

  mlflow:
    image: python:3.11-slim
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
               --default-artifact-root /app/mlruns"
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/app/mlruns
    depends_on:
      - postgres
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - ml

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  mlflow_data:

networks:
  ai-network:
    driver: bridge
