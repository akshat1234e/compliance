apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rbi-compliance-ingress
  namespace: rbi-compliance
  labels:
    app: rbi-compliance
    component: ingress
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://rbi-compliance.com,https://www.rbi-compliance.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Proxy configuration
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/session-cookie-name: "rbi-compliance-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain,text/css,text/xml,text/javascript,application/javascript,application/xml+rss,application/json"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
spec:
  tls:
  - hosts:
    - rbi-compliance.com
    - www.rbi-compliance.com
    - api.rbi-compliance.com
    secretName: rbi-compliance-tls
  rules:
  # Main application
  - host: rbi-compliance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3001
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: integration-gateway-service
            port:
              number: 3000
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001
  
  # WWW redirect
  - host: www.rbi-compliance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3001
  
  # API subdomain
  - host: api.rbi-compliance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: integration-gateway-service
            port:
              number: 3000

---
# Staging environment ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rbi-compliance-staging-ingress
  namespace: rbi-compliance-staging
  labels:
    app: rbi-compliance
    component: ingress
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-auth
    nginx.ingress.kubernetes.io/auth-realm: "RBI Compliance Platform - Staging"
spec:
  tls:
  - hosts:
    - staging.rbi-compliance.com
    secretName: rbi-compliance-staging-tls
  rules:
  - host: staging.rbi-compliance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3001
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: integration-gateway-service
            port:
              number: 3000
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001

---
# Development environment ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rbi-compliance-dev-ingress
  namespace: rbi-compliance-dev
  labels:
    app: rbi-compliance
    component: ingress
    environment: development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: dev-auth
    nginx.ingress.kubernetes.io/auth-realm: "RBI Compliance Platform - Development"
spec:
  rules:
  - host: dev.rbi-compliance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3001
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: integration-gateway-service
            port:
              number: 3000
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001

---
# Certificate issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app: cert-manager
    component: issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: devops@rbi-compliance.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app: cert-manager
    component: issuer
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: devops@rbi-compliance.com
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Basic auth secrets for staging and dev
apiVersion: v1
kind: Secret
metadata:
  name: staging-auth
  namespace: rbi-compliance-staging
  labels:
    app: rbi-compliance
    component: auth
    environment: staging
type: Opaque
data:
  auth: c3RhZ2luZzokYXByMSRIRzJLVGQyRCRILjFOOXFOL1NJSGdyTGxJVGNPdC4=  # staging:password

---
apiVersion: v1
kind: Secret
metadata:
  name: dev-auth
  namespace: rbi-compliance-dev
  labels:
    app: rbi-compliance
    component: auth
    environment: development
type: Opaque
data:
  auth: ZGV2OiRhcHIxJEhHMktUZDJEJEguMU45cU4vU0lIZ3JMbElUY090Lg==  # dev:password

---
# Network policy for ingress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-netpol
  namespace: rbi-compliance
  labels:
    app: nginx-ingress
    component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: rbi-compliance
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 3001
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
