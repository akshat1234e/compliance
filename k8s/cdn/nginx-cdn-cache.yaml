# NGINX CDN Cache Configuration
# High-performance caching layer for static assets in Kubernetes

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-cdn-config
  namespace: rbi-compliance
  labels:
    app: nginx-cdn
    component: caching
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    worker_rlimit_nofile 65535;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 16384;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        log_format cache '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'cache_status=$upstream_cache_status '
                        'cache_key="$scheme$proxy_host$request_uri"';
        
        access_log /var/log/nginx/access.log main;
        access_log /var/log/nginx/cache.log cache;
        
        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        keepalive_requests 1000;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Buffer settings
        client_body_buffer_size 128k;
        client_max_body_size 100m;
        client_header_buffer_size 64k;
        large_client_header_buffers 4 64k;
        
        # Proxy settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_temp_file_write_size 256k;
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Brotli compression
        brotli on;
        brotli_comp_level 6;
        brotli_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Cache paths
        proxy_cache_path /var/cache/nginx/static
                         levels=1:2
                         keys_zone=static_cache:100m
                         max_size=10g
                         inactive=7d
                         use_temp_path=off;
        
        proxy_cache_path /var/cache/nginx/images
                         levels=1:2
                         keys_zone=images_cache:50m
                         max_size=5g
                         inactive=30d
                         use_temp_path=off;
        
        proxy_cache_path /var/cache/nginx/api
                         levels=1:2
                         keys_zone=api_cache:10m
                         max_size=1g
                         inactive=1h
                         use_temp_path=off;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=static_limit:10m rate=100r/s;
        limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
        
        # Map for cache control
        map $sent_http_content_type $expires {
            default                    off;
            text/html                  5m;
            text/css                   1y;
            application/javascript     1y;
            ~image/                    1M;
            ~font/                     1y;
            application/pdf            1h;
            application/json           5m;
        }
        
        # Map for cache bypass
        map $request_method $cache_bypass {
            default 0;
            POST    1;
            PUT     1;
            DELETE  1;
            PATCH   1;
        }
        
        map $http_authorization $cache_bypass_auth {
            default 0;
            ~.+     1;
        }
        
        # Upstream for static assets (S3/CloudFront)
        upstream static_assets {
            server s3.ap-south-1.amazonaws.com:443;
            keepalive 32;
        }
        
        # Upstream for API
        upstream api_backend {
            server api-gateway:8080;
            keepalive 32;
        }
        
        # Main server block
        server {
            listen 80;
            listen [::]:80;
            server_name cdn.rbi-compliance.com assets.rbi-compliance.com;
            
            # Security headers
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;
            
            # Cache control
            expires $expires;
            
            # Rate limiting
            limit_req zone=static_limit burst=200 nodelay;
            limit_conn conn_limit 50;
            
            # JavaScript files
            location ~* ^/js/.*\.(js)$ {
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache static_cache;
                proxy_cache_valid 200 1y;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri";
                proxy_cache_bypass $cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=31536000, immutable" always;
                
                # CORS headers
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Encoding, Origin" always;
                add_header Access-Control-Max-Age "86400" always;
            }
            
            # CSS files
            location ~* ^/css/.*\.(css)$ {
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache static_cache;
                proxy_cache_valid 200 1y;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri";
                proxy_cache_bypass $cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=31536000, immutable" always;
                
                # CORS headers
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Encoding, Origin" always;
                add_header Access-Control-Max-Age "86400" always;
            }
            
            # Images
            location ~* ^/images/.*\.(png|jpg|jpeg|gif|webp|avif|svg|ico)$ {
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache images_cache;
                proxy_cache_valid 200 30d;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri";
                proxy_cache_bypass $cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=2592000" always;
                
                # CORS headers
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Encoding, Origin" always;
                add_header Access-Control-Max-Age "86400" always;
                
                # Image optimization headers
                add_header Vary "Accept" always;
            }
            
            # Fonts
            location ~* ^/fonts/.*\.(woff|woff2|ttf|eot|otf)$ {
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache static_cache;
                proxy_cache_valid 200 1y;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri";
                proxy_cache_bypass $cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=31536000, immutable" always;
                
                # CORS headers for fonts
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Encoding, Origin" always;
                add_header Access-Control-Max-Age "86400" always;
            }
            
            # Documents (protected)
            location ~* ^/documents/.*\.(pdf|doc|docx|xls|xlsx|ppt|pptx)$ {
                # Authentication required
                auth_request /auth;
                
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache static_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri$http_authorization";
                proxy_cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Authorization $http_authorization;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "private, max-age=300" always;
            }
            
            # API caching (selective)
            location ~* ^/api/(reference|config|metadata)/ {
                proxy_pass http://api_backend;
                
                proxy_cache api_cache;
                proxy_cache_valid 200 1h;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri$args";
                proxy_cache_bypass $cache_bypass $cache_bypass_auth;
                proxy_no_cache $cache_bypass $cache_bypass_auth;
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=3600" always;
                
                # Rate limiting for API
                limit_req zone=api_limit burst=20 nodelay;
            }
            
            # Manifest file
            location = /manifest.json {
                proxy_pass https://static_assets;
                proxy_ssl_server_name on;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_valid 404 1m;
                proxy_cache_key "$scheme$proxy_host$request_uri";
                
                # Headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache headers
                add_header X-Cache-Status $upstream_cache_status always;
                add_header Cache-Control "public, max-age=300" always;
                add_header Content-Type "application/json" always;
                
                # CORS headers
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Encoding, Origin" always;
                add_header Access-Control-Max-Age "86400" always;
            }
            
            # Health check
            location = /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Cache status endpoint
            location = /cache-status {
                access_log off;
                content_by_lua_block {
                    local cache_status = {
                        static_cache = ngx.shared.static_cache,
                        images_cache = ngx.shared.images_cache,
                        api_cache = ngx.shared.api_cache
                    }
                    ngx.header.content_type = "application/json"
                    ngx.say(require("cjson").encode(cache_status))
                }
            }
            
            # Authentication endpoint for protected content
            location = /auth {
                internal;
                proxy_pass http://api_backend/api/auth/verify;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header X-Original-URI $request_uri;
                proxy_set_header X-Original-Method $request_method;
                proxy_set_header Authorization $http_authorization;
            }
            
            # Default location
            location / {
                return 404;
            }
        }
        
        # Cache purge server (internal)
        server {
            listen 8080;
            server_name localhost;
            
            # Allow only internal access
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Purge cache endpoint
            location ~ /purge(/.*) {
                proxy_cache_purge static_cache "$scheme$proxy_host$1";
                return 200 "Purged: $1\n";
            }
            
            # Purge images cache
            location ~ /purge-images(/.*) {
                proxy_cache_purge images_cache "$scheme$proxy_host$1";
                return 200 "Purged images: $1\n";
            }
            
            # Purge API cache
            location ~ /purge-api(/.*) {
                proxy_cache_purge api_cache "$scheme$proxy_host$1";
                return 200 "Purged API: $1\n";
            }
            
            # Cache statistics
            location = /cache-stats {
                access_log off;
                content_by_lua_block {
                    local stats = {
                        timestamp = ngx.time(),
                        caches = {
                            static = {
                                size = ngx.shared.static_cache:get_keys(0),
                                free_space = ngx.shared.static_cache:free_space()
                            },
                            images = {
                                size = ngx.shared.images_cache:get_keys(0),
                                free_space = ngx.shared.images_cache:free_space()
                            },
                            api = {
                                size = ngx.shared.api_cache:get_keys(0),
                                free_space = ngx.shared.api_cache:free_space()
                            }
                        }
                    }
                    ngx.header.content_type = "application/json"
                    ngx.say(require("cjson").encode(stats))
                }
            }
        }
    }

---
# NGINX CDN Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-cdn
  namespace: rbi-compliance
  labels:
    app: nginx-cdn
    component: caching
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: nginx-cdn
  template:
    metadata:
      labels:
        app: nginx-cdn
        component: caching
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: admin
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "nginx -s quit; while killall -0 nginx; do sleep 1; done"]
      
      # NGINX Prometheus Exporter
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11.0
        args:
        - -nginx.scrape-uri=http://localhost:8080/nginx_status
        ports:
        - containerPort: 9113
          name: metrics
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-cdn-config
      - name: cache-volume
        emptyDir:
          sizeLimit: 10Gi
      - name: nginx-logs
        emptyDir: {}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx-cdn
              topologyKey: kubernetes.io/hostname

---
# NGINX CDN Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-cdn
  namespace: rbi-compliance
  labels:
    app: nginx-cdn
    component: caching
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: admin
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 9113
    targetPort: 9113
  selector:
    app: nginx-cdn

---
# HPA for NGINX CDN
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-cdn-hpa
  namespace: rbi-compliance
  labels:
    app: nginx-cdn
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-cdn
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
