version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: regulatory-postgres
    environment:
      POSTGRES_DB: regulatory_intelligence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - regulatory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d regulatory_intelligence"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: regulatory-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: regulatory_intelligence
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - regulatory-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: regulatory-redis
    command: redis-server --appendonly yes --requirepass password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - regulatory-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: regulatory-elasticsearch
    environment:
      - node.name=regulatory-es-node
      - cluster.name=regulatory-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - regulatory-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kibana (Optional - for Elasticsearch visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: regulatory-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=regulatory-kibana
    ports:
      - "5601:5601"
    networks:
      - regulatory-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # pgAdmin (Optional - for PostgreSQL administration)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: regulatory-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@compliance.platform
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - regulatory-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # MongoDB Express (Optional - for MongoDB administration)
  mongo-express:
    image: mongo-express:latest
    container_name: regulatory-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    ports:
      - "8081:8081"
    networks:
      - regulatory-network
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # Redis Commander (Optional - for Redis administration)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: regulatory-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:password
    ports:
      - "8082:8081"
    networks:
      - regulatory-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  regulatory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
