version: '3.8'

services:
  # =============================================================================
  # FRONTEND APPLICATION
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: rbi-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://kong:8000
    depends_on:
      - kong
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: rbi-auth-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  compliance-service:
    build:
      context: ./services/compliance-service
      dockerfile: Dockerfile
    container_name: rbi-compliance-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - MONGODB_URI=${MONGODB_URI}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    depends_on:
      - postgres
      - mongodb
      - elasticsearch
    networks:
      - rbi-network
    restart: unless-stopped

  document-management:
    build:
      context: ./services/document-management
      dockerfile: Dockerfile
    container_name: rbi-document-service
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    depends_on:
      - mongodb
    networks:
      - rbi-network
    restart: unless-stopped

  risk-assessment:
    build:
      context: ./services/risk-assessment
      dockerfile: Dockerfile
    container_name: rbi-risk-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - rbi-network
    restart: unless-stopped

  reporting-analytics:
    build:
      context: ./services/reporting-analytics
      dockerfile: Dockerfile
    container_name: rbi-analytics-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - postgres
      - elasticsearch
      - redis
    networks:
      - rbi-network
    restart: unless-stopped

  regulatory-intelligence:
    build:
      context: ./services/regulatory-intelligence
      dockerfile: Dockerfile
    container_name: rbi-regulatory-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    depends_on:
      - postgres
      - elasticsearch
    networks:
      - rbi-network
    restart: unless-stopped

  integration-gateway:
    build:
      context: ./services/integration-gateway
      dockerfile: Dockerfile
    container_name: rbi-integration-service
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - kafka
      - rabbitmq
    networks:
      - rbi-network
    restart: unless-stopped

  compliance-orchestration:
    build:
      context: ./services/compliance-orchestration
      dockerfile: Dockerfile
    container_name: rbi-orchestration-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
    depends_on:
      - postgres
      - kafka
    networks:
      - rbi-network
    restart: unless-stopped

  # =============================================================================
  # AI/ML SERVICES
  # =============================================================================

  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: rbi-ai-services
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=${MONGODB_URI}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - mongodb
      - elasticsearch
    networks:
      - rbi-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: rbi-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  mongodb:
    image: mongo:7.0
    container_name: rbi-mongodb-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DB}
    volumes:
      - mongodb_data:/data/db
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: rbi-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: rbi-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # =============================================================================
  # API GATEWAY
  # =============================================================================

  kong-database:
    image: postgres:15-alpine
    container_name: rbi-kong-db-prod
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - rbi-network
    restart: unless-stopped

  kong:
    image: kong:3.4-alpine
    container_name: rbi-kong-prod
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "80:8000"
      - "443:8443"
      - "8001:8001"
    networks:
      - rbi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MESSAGE QUEUE SERVICES
  # =============================================================================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: rbi-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rbi-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: rbi-kafka-prod
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - rbi-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rbi-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rbi-network
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: rbi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - rbi-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: rbi-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - rbi-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  kong_data:
  prometheus_data:
  grafana_data:

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  rbi-network:
    driver: bridge
